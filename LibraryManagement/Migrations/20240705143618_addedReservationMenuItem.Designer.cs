// <auto-generated />
using System;
using Library.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagement.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240705143618_addedReservationMenuItem")]
    partial class addedReservationMenuItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Model.Models.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AuthorId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Library.Model.Models.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PublishedYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library.Model.Models.BookAuthor", b =>
                {
                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AuthorID", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("Library.Model.Models.BookCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookCategories");
                });

            modelBuilder.Entity("Library.Model.Models.BookCopy", b =>
                {
                    b.Property<Guid>("BookCopyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<Guid>("OriginaBookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookCopyId");

                    b.HasIndex("OriginaBookId");

                    b.HasIndex("PublisherId");

                    b.ToTable("BookCopies");
                });

            modelBuilder.Entity("Library.Model.Models.BookCopyShelf", b =>
                {
                    b.Property<Guid>("BookCopyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShelfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookCopyId", "ShelfId", "RoomId");

                    b.HasIndex("RoomId", "ShelfId");

                    b.ToTable("Stored");
                });

            modelBuilder.Entity("Library.Model.Models.BookPublisher", b =>
                {
                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PublisherId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookPublisher");
                });

            modelBuilder.Entity("Library.Model.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Library.Model.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("RegularExpression", "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")
                        .HasAnnotation("RegularExpressionErrorMessage", "Invalid email address format");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasAnnotation("RegularExpression", "^5\\d{8}$");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Library.Model.Models.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de56323f-f819-43ce-8a8c-1a4d75f0e409"),
                            Body = "Dear @@userName@@,<br><br>Please click the following link to verify your email address:<br><br>@@resetLink@@<br><br>If you didn't request this verification, please ignore this email.<br><br>Best regards,<br>The Team",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            From = "noreply@example.com",
                            Subject = "Verify Your Email Address",
                            TemplateName = "Email Confirmation",
                            To = "@@userEmail@@"
                        },
                        new
                        {
                            Id = new Guid("e35c8ef4-1668-407e-9160-a90ec721ce46"),
                            Body = "Dear @@userName@@,<br><br>Thank you for registering with our application. To complete your registration, please click the following link to verify your email address:<br><br><a href='@@resetLink@@'>Verify Email</a><br><br>If you did not request this verification, please ignore this email.<br><br>Best regards,<br>The Team",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            From = "noreply@example.com",
                            Subject = "Verify Your Email Address",
                            TemplateName = "Email Verification",
                            To = "@@userEmail@@"
                        },
                        new
                        {
                            Id = new Guid("4b652470-c0fa-4db7-a2b6-d44572d11193"),
                            Body = "Dear @@userName@@,<br><br>We have received a request to change the email address associated with your account. If you made this request, please click the following link to verify your new email address:<br><br><a href='@@resetLink@@'>Verify New Email</a><br><br>If you did not request this change, please ignore this email and your email address will remain the same.<br><br>Best regards,<br>The Team",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            From = "natchkebiadima1@gmail.com",
                            Subject = "Email Change Request",
                            TemplateName = "Change Email Request",
                            To = "@@userEmail@@"
                        },
                        new
                        {
                            Id = new Guid("39f25002-e125-4ca2-9f9a-0317d75a4355"),
                            Body = "Dear @@userName@@,<br><br>We have received a request to change the email address associated with your account If you made this request, no further action is required. Please verify your new email address using the link sent to it.<br><br>If you did not request this change, please contact us immediately to secure your account.<br><br>Best regards,<br>The Team",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            From = "natchkebiadima1@gmail.com",
                            Subject = "Email Change Request Notification",
                            TemplateName = "Email Change Notification",
                            To = "@@originalEmail@@"
                        });
                });

            modelBuilder.Entity("Library.Model.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoomId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "886a5f66-5376-4bb9-8f76-3e7265db2884",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4ceabba-6499-40d6-ab3d-235d9f69005e",
                            CreationDate = new DateTime(2024, 7, 5, 14, 36, 17, 939, DateTimeKind.Utc).AddTicks(8692),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nachkebiadima2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Super",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGb8NuiqgchhTThStVWaF515AE+8AZqoSK/8OSmhba2U3s1CugD0IhdMjdBmNrMaWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec1910dc-a2f8-4da8-9138-26d169241812",
                            TwoFactorEnabled = false,
                            UserName = "nachkebiadima2@gmail.com"
                        });
                });

            modelBuilder.Entity("Library.Model.Models.NavigationMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Permitted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("NavigationMenus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81a3994d-37ee-4833-a978-de19e7364514"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("bf7fed55-6c0a-4559-8add-139cd98bd876"),
                            ActionName = "Roles",
                            ControllerName = "Administrator",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Roles",
                            ParentMenuId = new Guid("81a3994d-37ee-4833-a978-de19e7364514"),
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("b86538b2-c245-40fe-be8b-ff64cdc62637"),
                            ActionName = "Users",
                            ControllerName = "Administrator",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users",
                            ParentMenuId = new Guid("81a3994d-37ee-4833-a978-de19e7364514"),
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("1c48f4be-67d9-4201-93ca-6fbaead68f59"),
                            ActionName = "Templates",
                            ControllerName = "Administrator",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Email Templates",
                            ParentMenuId = new Guid("81a3994d-37ee-4833-a978-de19e7364514"),
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("919bd644-16d7-483a-a6f7-aea8aa198ffd"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Super Admin",
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("62c3dd88-8cdd-47b6-b212-053623fe245c"),
                            ActionName = "Users",
                            ControllerName = "SuperAdminController",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users",
                            ParentMenuId = new Guid("919bd644-16d7-483a-a6f7-aea8aa198ffd"),
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("c555643a-c44b-4fb8-8fd0-cf5066b9efb9"),
                            ActionName = "Roles",
                            ControllerName = "Administrator",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pending Users",
                            ParentMenuId = new Guid("62c3dd88-8cdd-47b6-b212-053623fe245c"),
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("8eb1fb90-24bc-4644-9139-74b6f425a83c"),
                            ActionName = "Users",
                            ControllerName = "Administrator",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Active Users",
                            ParentMenuId = new Guid("62c3dd88-8cdd-47b6-b212-053623fe245c"),
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("d35d1f1e-95ee-494c-96da-448d8677426e"),
                            ActionName = "DeletedUsers",
                            ControllerName = "Administrator",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deletede Users",
                            ParentMenuId = new Guid("62c3dd88-8cdd-47b6-b212-053623fe245c"),
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("17a08e70-686e-4049-9746-b565a0fe8924"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserName",
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("5f866173-a55c-4ac8-93df-18aa625de1d7"),
                            ActionName = "Profile",
                            ControllerName = "Account",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Profile",
                            ParentMenuId = new Guid("17a08e70-686e-4049-9746-b565a0fe8924"),
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("d3208527-a5f5-4e33-88c8-1a30af0e97e1"),
                            ActionName = "Authors",
                            ControllerName = "Author",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Authors",
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("936a8edd-a127-4344-af9a-93ed9a32537f"),
                            ActionName = "Categories",
                            ControllerName = "Category",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Categories",
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("2eb40a9c-2565-4c2c-a832-feca78f4603b"),
                            ActionName = "Publishers",
                            ControllerName = "Publisher",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Publishers",
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("9b96f51e-3d27-4eeb-b491-b6a75d8f0a01"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Books",
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("d0c80121-b900-4515-8521-2737468ffa6a"),
                            ActionName = "Books",
                            ControllerName = "Book",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Original Books",
                            ParentMenuId = new Guid("9b96f51e-3d27-4eeb-b491-b6a75d8f0a01"),
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("092ac460-2e13-4e44-b207-7d44e3f5ca8b"),
                            ActionName = "BookCopies",
                            ControllerName = "BookCopy",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Book Copies",
                            ParentMenuId = new Guid("9b96f51e-3d27-4eeb-b491-b6a75d8f0a01"),
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("f513d8d7-b945-40d2-b679-2c2bbdd24f25"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Reservations",
                            Permitted = true
                        },
                        new
                        {
                            Id = new Guid("10dc9edc-913d-4dda-a6ff-fe9065d575ee"),
                            ActionName = "Customers",
                            ControllerName = "Customer",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customers",
                            ParentMenuId = new Guid("f513d8d7-b945-40d2-b679-2c2bbdd24f25"),
                            Permitted = true
                        });
                });

            modelBuilder.Entity("Library.Model.Models.Publisher", b =>
                {
                    b.Property<Guid>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("Library.Model.Models.Reservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActualReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BookCopyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsLate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("CASE WHEN [ActualReturnDate] IS NULL THEN CAST(NULL AS BIT) ELSE CAST(CASE WHEN [ActualReturnDate] > [SupposedReturnDate] THEN 1 ELSE 0 END AS BIT) END");

                    b.Property<Guid>("ReturnCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SupposedReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReservationId");

                    b.HasIndex("BookCopyID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Library.Model.Models.RoleMenuPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NavigationMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NavigationMenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleMenus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a78f3359-a804-40b6-ba30-1734ff09ef20"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("bf7fed55-6c0a-4559-8add-139cd98bd876"),
                            RoleId = "2a2e8e85-49f0-45ef-97c5-3151d1b91306"
                        },
                        new
                        {
                            Id = new Guid("755e4637-f8c9-4f28-93fe-7c91db18f208"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("b86538b2-c245-40fe-be8b-ff64cdc62637"),
                            RoleId = "2a2e8e85-49f0-45ef-97c5-3151d1b91306"
                        },
                        new
                        {
                            Id = new Guid("35b16b1c-3871-485d-96dd-d4a5054f9e89"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("81a3994d-37ee-4833-a978-de19e7364514"),
                            RoleId = "2a2e8e85-49f0-45ef-97c5-3151d1b91306"
                        },
                        new
                        {
                            Id = new Guid("cd2d5005-59e2-4e0b-b1b8-203f37e4a864"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("1c48f4be-67d9-4201-93ca-6fbaead68f59"),
                            RoleId = "2a2e8e85-49f0-45ef-97c5-3151d1b91306"
                        },
                        new
                        {
                            Id = new Guid("6b8d5ed7-6607-47f0-8d29-bb3c77965a2c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("919bd644-16d7-483a-a6f7-aea8aa198ffd"),
                            RoleId = "7984b858-30e3-4e98-a37e-a960b1b0bbee"
                        },
                        new
                        {
                            Id = new Guid("ceeb4d3f-7f0c-40e1-acc6-c5b12991d9a9"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("62c3dd88-8cdd-47b6-b212-053623fe245c"),
                            RoleId = "7984b858-30e3-4e98-a37e-a960b1b0bbee"
                        },
                        new
                        {
                            Id = new Guid("89d64979-209d-46fc-86de-35d8a4095938"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("c555643a-c44b-4fb8-8fd0-cf5066b9efb9"),
                            RoleId = "2a2e8e85-49f0-45ef-97c5-3151d1b91306"
                        },
                        new
                        {
                            Id = new Guid("7964663e-7444-4ab7-8956-26f521b28623"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("8eb1fb90-24bc-4644-9139-74b6f425a83c"),
                            RoleId = "2a2e8e85-49f0-45ef-97c5-3151d1b91306"
                        },
                        new
                        {
                            Id = new Guid("27ccdc70-a592-422e-94e2-3de6024fb84a"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("d35d1f1e-95ee-494c-96da-448d8677426e"),
                            RoleId = "2a2e8e85-49f0-45ef-97c5-3151d1b91306"
                        },
                        new
                        {
                            Id = new Guid("f6fad94b-0fca-43f9-86c9-a7f7f11a9848"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("17a08e70-686e-4049-9746-b565a0fe8924"),
                            RoleId = "2a2e8e85-49f0-45ef-97c5-3151d1b91306"
                        },
                        new
                        {
                            Id = new Guid("3dba4d83-6672-4c5c-adae-83e94a540d9f"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("17a08e70-686e-4049-9746-b565a0fe8924"),
                            RoleId = "4ca481bb-5e65-4a13-8a4c-c75e93e0ac45"
                        },
                        new
                        {
                            Id = new Guid("e4bdd239-e093-4735-afb9-f6bacc947bd2"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("17a08e70-686e-4049-9746-b565a0fe8924"),
                            RoleId = "b8b819da-4f16-4d09-9d10-7da416f2fb4b"
                        },
                        new
                        {
                            Id = new Guid("90acdbc8-f095-4ac5-ab49-286bb1204815"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("17a08e70-686e-4049-9746-b565a0fe8924"),
                            RoleId = "7984b858-30e3-4e98-a37e-a960b1b0bbee"
                        },
                        new
                        {
                            Id = new Guid("d400708f-c8da-4c8c-8acc-15e4ce35acec"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("5f866173-a55c-4ac8-93df-18aa625de1d7"),
                            RoleId = "2a2e8e85-49f0-45ef-97c5-3151d1b91306"
                        },
                        new
                        {
                            Id = new Guid("dfca922d-21d6-46a4-9c93-89e77d555795"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("5f866173-a55c-4ac8-93df-18aa625de1d7"),
                            RoleId = "4ca481bb-5e65-4a13-8a4c-c75e93e0ac45"
                        },
                        new
                        {
                            Id = new Guid("8495e094-848d-4f91-9d09-123e38da3995"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("5f866173-a55c-4ac8-93df-18aa625de1d7"),
                            RoleId = "b8b819da-4f16-4d09-9d10-7da416f2fb4b"
                        },
                        new
                        {
                            Id = new Guid("08703c56-edee-4d7e-8054-7503127a5062"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("5f866173-a55c-4ac8-93df-18aa625de1d7"),
                            RoleId = "7984b858-30e3-4e98-a37e-a960b1b0bbee"
                        },
                        new
                        {
                            Id = new Guid("d1b04044-46e2-42c7-ba8c-58ea74ec7b33"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("d3208527-a5f5-4e33-88c8-1a30af0e97e1"),
                            RoleId = "4ca481bb-5e65-4a13-8a4c-c75e93e0ac45"
                        },
                        new
                        {
                            Id = new Guid("25ae0dc8-016b-4283-91f8-199b57fa9b47"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("936a8edd-a127-4344-af9a-93ed9a32537f"),
                            RoleId = "4ca481bb-5e65-4a13-8a4c-c75e93e0ac45"
                        },
                        new
                        {
                            Id = new Guid("e58708b7-a19b-4225-aa53-ff4cd463899e"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("2eb40a9c-2565-4c2c-a832-feca78f4603b"),
                            RoleId = "4ca481bb-5e65-4a13-8a4c-c75e93e0ac45"
                        },
                        new
                        {
                            Id = new Guid("23c5eb3f-4f6d-4118-95bc-4b36aa99d1ba"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("9b96f51e-3d27-4eeb-b491-b6a75d8f0a01"),
                            RoleId = "4ca481bb-5e65-4a13-8a4c-c75e93e0ac45"
                        },
                        new
                        {
                            Id = new Guid("44449f8f-cdd7-4ec5-b9b9-c55d29fff80a"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("d0c80121-b900-4515-8521-2737468ffa6a"),
                            RoleId = "4ca481bb-5e65-4a13-8a4c-c75e93e0ac45"
                        },
                        new
                        {
                            Id = new Guid("a0556878-befb-4560-985e-f869278caec6"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("092ac460-2e13-4e44-b207-7d44e3f5ca8b"),
                            RoleId = "4ca481bb-5e65-4a13-8a4c-c75e93e0ac45"
                        },
                        new
                        {
                            Id = new Guid("f2d52c43-e72f-479b-bae7-79145ecdaf22"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("f513d8d7-b945-40d2-b679-2c2bbdd24f25"),
                            RoleId = "4ca481bb-5e65-4a13-8a4c-c75e93e0ac45"
                        },
                        new
                        {
                            Id = new Guid("8fe1cf81-8054-4a40-b7ab-e521c83d2404"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NavigationMenuId = new Guid("10dc9edc-913d-4dda-a6ff-fe9065d575ee"),
                            RoleId = "4ca481bb-5e65-4a13-8a4c-c75e93e0ac45"
                        });
                });

            modelBuilder.Entity("Library.Model.Models.Room", b =>
                {
                    b.Property<Guid>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = new Guid("4c1d5049-b1cd-4130-999b-ec58b185f59a"),
                            Capacity = 20,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomNumber = 101
                        },
                        new
                        {
                            RoomId = new Guid("f95a0286-27df-4dea-b2e1-1e9e6dac07fd"),
                            Capacity = 30,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomNumber = 102
                        },
                        new
                        {
                            RoomId = new Guid("45f5855a-8bed-4b4f-b42a-979f25f6d3d5"),
                            Capacity = 25,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomNumber = 201
                        });
                });

            modelBuilder.Entity("Library.Model.Models.Shelf", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShelfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<int>("ShelfNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoomId", "ShelfId");

                    b.ToTable("Shelf");

                    b.HasData(
                        new
                        {
                            RoomId = new Guid("4c1d5049-b1cd-4130-999b-ec58b185f59a"),
                            ShelfId = new Guid("8a491b2f-b39f-4957-abc6-58db09042395"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxCapacity = 100,
                            ShelfNumber = 1
                        },
                        new
                        {
                            RoomId = new Guid("4c1d5049-b1cd-4130-999b-ec58b185f59a"),
                            ShelfId = new Guid("a30ec77f-2a39-466d-a9ce-596d6e081075"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxCapacity = 100,
                            ShelfNumber = 2
                        },
                        new
                        {
                            RoomId = new Guid("f95a0286-27df-4dea-b2e1-1e9e6dac07fd"),
                            ShelfId = new Guid("94e8259a-fbd7-44c8-ae93-c0772df00f8f"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxCapacity = 100,
                            ShelfNumber = 1
                        },
                        new
                        {
                            RoomId = new Guid("45f5855a-8bed-4b4f-b42a-979f25f6d3d5"),
                            ShelfId = new Guid("d3595162-093a-4fc8-b046-ad38fc481872"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxCapacity = 100,
                            ShelfNumber = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c8b6e5f6-10f0-4680-ad91-1c41335e2cc1",
                            Name = "Librarian",
                            NormalizedName = "LIBRARIAN"
                        },
                        new
                        {
                            Id = "64b81cd6-24a9-4a7a-b90b-1144fbcafcee",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "c84800e4-5f0f-4829-a24c-33667e7ed7ba",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "e0280d01-41b1-4363-bef8-c8938bbe7a84",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "c8106d81-41ff-4765-b04d-0692753aeb76",
                            Name = "Default",
                            NormalizedName = "DEFAULT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Library.Model.Models.BookAuthor", b =>
                {
                    b.HasOne("Library.Model.Models.Author", "Author")
                        .WithMany("BooksWritten")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Model.Models.Book", "Book")
                        .WithMany("Authors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Library.Model.Models.BookCategory", b =>
                {
                    b.HasOne("Library.Model.Models.Book", "Book")
                        .WithMany("Categories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Model.Models.Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Library.Model.Models.BookCopy", b =>
                {
                    b.HasOne("Library.Model.Models.Book", "OriginalBook")
                        .WithMany("Copyrights")
                        .HasForeignKey("OriginaBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Model.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalBook");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Library.Model.Models.BookCopyShelf", b =>
                {
                    b.HasOne("Library.Model.Models.BookCopy", "BookCopy")
                        .WithMany("Shelves")
                        .HasForeignKey("BookCopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Model.Models.Shelf", "Shelf")
                        .WithMany("Books")
                        .HasForeignKey("RoomId", "ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookCopy");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("Library.Model.Models.BookPublisher", b =>
                {
                    b.HasOne("Library.Model.Models.Book", "Book")
                        .WithMany("Publishers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Model.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Library.Model.Models.Customer", b =>
                {
                    b.OwnsOne("Library.Model.Models.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Model.Models.Employee", b =>
                {
                    b.HasOne("Library.Model.Models.Room", null)
                        .WithMany("Employees")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Library.Model.Models.NavigationMenu", b =>
                {
                    b.HasOne("Library.Model.Models.NavigationMenu", "ParentNavigationMenu")
                        .WithMany()
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentNavigationMenu");
                });

            modelBuilder.Entity("Library.Model.Models.Reservation", b =>
                {
                    b.HasOne("Library.Model.Models.BookCopy", "BookCopy")
                        .WithMany("Reservations")
                        .HasForeignKey("BookCopyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Model.Models.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Model.Models.Employee", "Employee")
                        .WithMany("Reservations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookCopy");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Library.Model.Models.RoleMenuPermission", b =>
                {
                    b.HasOne("Library.Model.Models.NavigationMenu", "NavigationMenu")
                        .WithMany()
                        .HasForeignKey("NavigationMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NavigationMenu");
                });

            modelBuilder.Entity("Library.Model.Models.Shelf", b =>
                {
                    b.HasOne("Library.Model.Models.Room", "Room")
                        .WithMany("Shelves")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Library.Model.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Library.Model.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Model.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Library.Model.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Model.Models.Author", b =>
                {
                    b.Navigation("BooksWritten");
                });

            modelBuilder.Entity("Library.Model.Models.Book", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Categories");

                    b.Navigation("Copyrights");

                    b.Navigation("Publishers");
                });

            modelBuilder.Entity("Library.Model.Models.BookCopy", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("Library.Model.Models.Category", b =>
                {
                    b.Navigation("BookCategories");
                });

            modelBuilder.Entity("Library.Model.Models.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Library.Model.Models.Employee", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Library.Model.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library.Model.Models.Room", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("Library.Model.Models.Shelf", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
